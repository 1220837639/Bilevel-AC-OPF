include free\QP\presolve\init_presolve_qp.run;

problem SM1_QP:   dfi, dV, P, Q, Pgen, Qgen, cos_f, v_soa, cv1, cv2, cv3, v1, v2, v3, v4,
		          bus_q_soa, power_f_soa, power_t_soa, reactive_f_soa, reactive_t_soa,
		          refc_soa,
		          cos1, cos2, cos3, cos00, v_soa1, v_soa2, v_soa3, v_soa4, v_soa00,
		          lambda1,lambda2,lambda3,lambda4,lambda5,lambda6,lambda7,lambda11,lambda12,lambda13,lambda14,
                  lambda15,lambda16,lambda17,lambda18,lambda19,lambda20,lambda21,lambda22,
                  mi1max,mi1min,mi2max,mi2min,mi3max,mi3min,
                  dual_dfi, dual_dV, dual_P, dual_Q, dual_Pgen, dual_Qgen, dual_cosf, dual_vsoa

;
model free\QP\components\SM1_QP.mod;



include free\polar.run;

for {1..1} {


include free\QP\presolve\presolve_qp.run;

printf "\n\n##########  Main Solve  ##########\n\n\n";
problem SM1_QP;
option solver knitroa;
option knitro_options "outlev=2 strat_warm_start=1 cpuplatform=4 par_numthreads=8";

solve SM1_QP;



include post_proc1.run;

let {t in time} qbat_fix[t] := qbat[t];
include free\polar.run;

include post_proc2.run;

}



